// <auto-generated />
using System;
using Back_HR.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Back_HR.Migrations
{
    [DbContext(typeof(HRContext))]
    [Migration("20250226143023_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Back_HR.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobOfferId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Back_HR.Models.Competence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("Back_HR.Models.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RHId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RHId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("Back_HR.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Back_HR.Models.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.PrimitiveCollection<string>("Questions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Back_HR.Models.SurveyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("Back_HR.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CandidatCompetence", b =>
                {
                    b.Property<Guid>("CandidatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetencesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidatsId", "CompetencesId");

                    b.HasIndex("CompetencesId");

                    b.ToTable("CandidateSkills", (string)null);
                });

            modelBuilder.Entity("CompetenceJobOffer", b =>
                {
                    b.Property<Guid>("CompetencesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobOffresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompetencesId", "JobOffresId");

                    b.HasIndex("JobOffresId");

                    b.ToTable("JobOfferSkills", (string)null);
                });

            modelBuilder.Entity("EmployeSurvey", b =>
                {
                    b.Property<Guid>("EmployesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveysRespondedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployesId", "SurveysRespondedId");

                    b.HasIndex("SurveysRespondedId");

                    b.ToTable("SurveyEmployees", (string)null);
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.Property<Guid>("NotificationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("NotificationUsers", (string)null);
                });

            modelBuilder.Entity("Back_HR.Models.Candidat", b =>
                {
                    b.HasBaseType("Back_HR.Models.User");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RHId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RHId");

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("Back_HR.Models.Employe", b =>
                {
                    b.HasBaseType("Back_HR.Models.User");

                    b.Property<string>("Poste")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Back_HR.Models.RH", b =>
                {
                    b.HasBaseType("Back_HR.Models.User");

                    b.ToTable("HRs", (string)null);
                });

            modelBuilder.Entity("Back_HR.Models.Application", b =>
                {
                    b.HasOne("Back_HR.Models.Candidat", "Candidat")
                        .WithMany("Applications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.JobOffer", "JobOffer")
                        .WithMany("Applications")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidat");

                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("Back_HR.Models.JobOffer", b =>
                {
                    b.HasOne("Back_HR.Models.RH", "RHResponsable")
                        .WithMany("Offres")
                        .HasForeignKey("RHId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RHResponsable");
                });

            modelBuilder.Entity("Back_HR.Models.SurveyResponse", b =>
                {
                    b.HasOne("Back_HR.Models.Employe", "Employee")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.Survey", "Survey")
                        .WithMany("Responses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CandidatCompetence", b =>
                {
                    b.HasOne("Back_HR.Models.Candidat", null)
                        .WithMany()
                        .HasForeignKey("CandidatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.Competence", null)
                        .WithMany()
                        .HasForeignKey("CompetencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetenceJobOffer", b =>
                {
                    b.HasOne("Back_HR.Models.Competence", null)
                        .WithMany()
                        .HasForeignKey("CompetencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("JobOffresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeSurvey", b =>
                {
                    b.HasOne("Back_HR.Models.Employe", null)
                        .WithMany()
                        .HasForeignKey("EmployesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveysRespondedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.HasOne("Back_HR.Models.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_HR.Models.Candidat", b =>
                {
                    b.HasOne("Back_HR.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Back_HR.Models.Candidat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_HR.Models.RH", null)
                        .WithMany("Candidats")
                        .HasForeignKey("RHId");
                });

            modelBuilder.Entity("Back_HR.Models.Employe", b =>
                {
                    b.HasOne("Back_HR.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Back_HR.Models.Employe", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_HR.Models.RH", b =>
                {
                    b.HasOne("Back_HR.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Back_HR.Models.RH", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back_HR.Models.JobOffer", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Back_HR.Models.Survey", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Back_HR.Models.Candidat", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Back_HR.Models.Employe", b =>
                {
                    b.Navigation("SurveyResponses");
                });

            modelBuilder.Entity("Back_HR.Models.RH", b =>
                {
                    b.Navigation("Candidats");

                    b.Navigation("Offres");
                });
#pragma warning restore 612, 618
        }
    }
}
